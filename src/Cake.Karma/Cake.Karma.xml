<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Karma</name>
    </assembly>
    <members>
        <member name="T:Cake.Karma.KarmaAliases">
            <summary>
            Contains functionality to interact with karma start, karma run, or karma init commands.
            </summary>
        </member>
        <member name="M:Cake.Karma.KarmaAliases.KarmaStart(Cake.Core.ICakeContext,System.Action{Cake.Karma.KarmaStartSettings})">
            <summary>
            Runs karma start with a function for settings.
            </summary>
            <param name="context">The context.</param>
            <param name="configureSettings">Function to supply for configuring settings.</param>
            <example>
            <para>Define the configuration file</para>
            <code>
            <![CDATA[
                KarmaStart(settings => 
                {
                    settings.ConfigFile = "karma.conf.js";
                });
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Karma.KarmaAliases.KarmaStart(Cake.Core.ICakeContext,Cake.Karma.KarmaStartSettings)">
            <summary>
            Runs karma start with settings.
            </summary>
            <param name="context">The context.</param>
            <param name="settings">The command settings.</param>
            <example>
            <para>Define the configuration file</para>
            <code>
            <![CDATA[
                var settings =
                    new KarmaStartSettings
                    {
                       ConfigFile = "karma.conf.js"
                    };
                KarmaStart(settings);
            ]]>
            </code>
            <para>Run locally by specifying the run mode</para>
            <code>
            <![CDATA[
                var settings =
                    new KarmaStartSettings
                    {
                        RunMode = KarmaRunMode.Local,
                        ConfigFile = "karma.conf.js"
                    };
                KarmaStart(settings);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Karma.KarmaAliases.KarmaRun(Cake.Core.ICakeContext,System.Action{Cake.Karma.KarmaRunSettings})">
            <summary>
            Runs karma run with a function for settings.
            </summary>
            <param name="context">The context.</param>
            <param name="configureSettings">Function to supply for configuring settings.</param>
            <example>
            <para>Define the configuration file</para>
            <code>
            <![CDATA[
                KarmaRun(settings => 
                {
                    settings.ConfigFile = "karma.conf.js";
                });
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Karma.KarmaAliases.KarmaRun(Cake.Core.ICakeContext,Cake.Karma.KarmaRunSettings)">
            <summary>
            Runs karma run with settings.
            </summary>
            <param name="context">The context.</param>
            <param name="settings">The command settings.</param>
            <example>
            <para>Define the configuration file</para>
            <code>
            <![CDATA[
                var settings =
                    new KarmaRunSettings
                    {
                       ConfigFile = "karma.conf.js"
                    };
                KarmaRun(settings);
            ]]>
            </code>
            <para>Run locally by specifying the run mode</para>
            <code>
            <![CDATA[
                var settings =
                    new KarmaRunSettings
                    {
                        RunMode = KarmaRunMode.Local,
                        ConfigFile = "karma.conf.js"
                    };
                KarmaRun(settings);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Karma.KarmaAliases.KarmaInit(Cake.Core.ICakeContext,System.Action{Cake.Karma.KarmaSettings})">
            <summary>
            Runs karma init with a function for settings.
            </summary>
            <param name="context">The context.</param>
            <param name="configureSettings">Function to supply for configuring settings.</param>
            <example>
            <para>Define the configuration file</para>
            <code>
            <![CDATA[
                KarmaInit(settings => 
                {
                    settings.ConfigFile = "karma.conf.js";
                });
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Karma.KarmaAliases.KarmaInit(Cake.Core.ICakeContext,Cake.Karma.KarmaSettings)">
            <summary>
            Runs karma init with settings.
            </summary>
            <param name="context">The context.</param>
            <param name="settings">The command settings.</param>
            <example>
            <para>Define the configuration file</para>
            <code>
            <![CDATA[
                var settings =
                    new KarmaSettings
                    {
                       ConfigFile = "karma.conf.js"
                    };
                KarmaInit(settings);
            ]]>
            </code>
            <para>Run locally by specifying the run mode</para>
            <code>
            <![CDATA[
                var settings =
                    new KarmaSettings
                    {
                        RunMode = KarmaRunMode.Local,
                        ConfigFile = "karma.conf.js"
                    };
                KarmaInit(settings);
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Cake.Karma.KarmaRunnerLocal`1">
            <summary>
            The karma runner for local mode execution.
            </summary>
            <typeparam name="TSettings">The type of settings to provide for the relevant karma command (start, run, init).</typeparam>
        </member>
        <member name="M:Cake.Karma.KarmaRunnerLocal`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Default constructor for <see cref="T:Cake.Karma.KarmaRunnerLocal`1" />.
            </summary>
            <param name="fileSystem"></param>
            <param name="environment"></param>
            <param name="processRunner"></param>
            <param name="tools"></param>
        </member>
        <member name="M:Cake.Karma.KarmaRunnerLocal`1.GetToolName">
            <summary>
            The name of the tool, used during logging.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Karma.KarmaRunnerLocal`1.GetToolExecutableNames">
            <summary>
            Available tool executable names for local karma runs.
            </summary>
            <returns>The available tool execution names.</returns>
        </member>
        <member name="M:Cake.Karma.KarmaRunnerLocal`1.Execute(`0)">
            <summary>
            Execute the runner with the specified settings. If LocalKarmaCli is not set, it defaults to <see cref="F:Cake.Karma.KarmaSettings.DefaultLocalKarmaCli" />.
            </summary>
            <param name="settings">Command settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if settings is null.</exception>
        </member>
        <member name="M:Cake.Karma.KarmaRunnerLocal`1.ValidateSettings(`0)">
            <summary>
            Validates the provides settings for local mode.
            </summary>
            <param name="settings">The settings to validate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the runner is used when settings.RunMode is not Local.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the Karma CLI file cannot be located.</exception>
        </member>
        <member name="T:Cake.Karma.KarmaRunner`1">
            <summary>
            The karma runner for global mode execution.
            </summary>
            <typeparam name="TSettings">The type of settings to provide for the relevant karma command (start, run, init).</typeparam>
        </member>
        <member name="P:Cake.Karma.KarmaRunner`1.Environment">
            <summary>
            A reference to the supplied <see cref="T:Cake.Core.ICakeEnvironment" />.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaRunner`1.FileSystem">
            <summary>
            A reference to the supplied <see cref="T:Cake.Core.IO.IFileSystem" />.
            </summary>
        </member>
        <member name="M:Cake.Karma.KarmaRunner`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Default constructor for <see cref="T:Cake.Karma.KarmaRunner`1" />.
            </summary>
            <param name="fileSystem"></param>
            <param name="environment"></param>
            <param name="processRunner"></param>
            <param name="tools"></param>
        </member>
        <member name="M:Cake.Karma.KarmaRunner`1.GetToolName">
            <summary>
            The name of the tool, used during logging.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Karma.KarmaRunner`1.GetToolExecutableNames">
            <summary>
            Available tool executable names for local karma runs.
            </summary>
            <returns>The available tool execution names.</returns>
        </member>
        <member name="M:Cake.Karma.KarmaRunner`1.Execute(`0)">
            <summary>
            Execute the runner with the specified settings.
            </summary>
            <param name="settings">Command settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if settings is null.</exception>
        </member>
        <member name="M:Cake.Karma.KarmaRunner`1.ValidateSettings(`0)">
            <summary>
            Validates the provides settings for global mode.
            </summary>
            <param name="settings">The settings to validate.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the config file setting value is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the config file cannot be located.</exception>
        </member>
        <member name="M:Cake.Karma.KarmaRunner`1.GetWorkingDirectoryFullPath(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Gets the filepath absolute when exist working drectory or relative if not.
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <param name="filePath">The file path.</param>
            <returns>the path of file</returns>
        </member>
        <member name="T:Cake.Karma.KarmaRunnerFactory">
            <summary>
            The karma runner factory, determines which runner to use based on run mode.
            </summary>
        </member>
        <member name="M:Cake.Karma.KarmaRunnerFactory.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            Default constructor for <see cref="T:Cake.Karma.KarmaRunnerFactory" />.
            </summary>
            <param name="fileSystem"></param>
            <param name="environment"></param>
            <param name="processRunner"></param>
            <param name="tools"></param>
        </member>
        <member name="M:Cake.Karma.KarmaRunnerFactory.CreateRunner``1(Cake.Karma.KarmaRunMode)">
            <summary>
            Creates a new runner based on run mode.
            </summary>
            <typeparam name="TSettings">The type of settings to use for the runner.</typeparam>
            <param name="runMode">The run mode of the command.</param>
            <returns>A fully constructed <see cref="T:Cake.Karma.KarmaRunner`1"/>.</returns>
        </member>
        <member name="T:Cake.Karma.KarmaLogLevel">
            <summary>
            Available Karma logging levels.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaLogLevel.Disable">
            <summary>
            No logging.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaLogLevel.Error">
            <summary>
            Log errors.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaLogLevel.Warn">
            <summary>
            Log warnings.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaLogLevel.Info">
            <summary>
            Log info.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaLogLevel.Debug">
            <summary>
            Log diagnostics.
            </summary>
        </member>
        <member name="T:Cake.Karma.KarmaReporter">
            <summary>
            Available Karma reporters.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaReporter.Dots">
            <summary>
            Dots.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaReporter.Progress">
            <summary>
            Progress.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaReporter.JUnit">
            <summary>
            JUnit.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaReporter.Growl">
            <summary>
            Growl.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaReporter.Coverage">
            <summary>
            Coverage.
            </summary>
        </member>
        <member name="T:Cake.Karma.KarmaRunMode">
            <summary>
            Run modes.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaRunMode.Local">
            <summary>
            Run the command using local Karma.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaRunMode.Global">
            <summary>
            Run the command using global Karma.
            </summary>
        </member>
        <member name="T:Cake.Karma.KarmaSettings">
            <summary>
            Settings common across all Karma commands.
            </summary>
        </member>
        <member name="F:Cake.Karma.KarmaSettings.DefaultLocalKarmaCli">
            <summary>
            The default Karma CLI file, if one is not specified during local run mode.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSettings.RunMode">
            <summary>
            Run karma locally or globally. Defaults to KarmaRunMode.Global.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSettings.LocalKarmaCli">
            <summary>
            Path to Karma CLI. Use this if you want to utilise a local Karma deployment, otherwise Global use is attempted.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSettings.ConfigFile">
            <summary>
            The conf.js file to use.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSettings.LogLevel">
            <summary>
            Level of logging.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSettings.Colors">
            <summary>
            Use colors when reporting or printing logs.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSettings.NoColors">
            <summary>
            Do not use colors when reporting or printing logs.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Cake.Karma.KarmaSettings.EvaluateCore(Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Evaluate further settings.
            </summary>
        </member>
        <member name="T:Cake.Karma.KarmaSharedSettings">
            <summary>
            Settings shared across start and run commands.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSharedSettings.Port">
            <summary>
            Port where the server is listening.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSharedSettings.FailOnEmptyTestSuite">
            <summary>
            Fail on empty test suite.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaSharedSettings.NoFailOnEmptyTestSuite">
            <summary>
            Do not fail on empty test suite.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Cake.Karma.KarmaSharedSettings.EvaluateCore(Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Applies the settings to the process arguments ready for execution.
            </summary>
            <param name="args">The builder to apply the settings to.</param>
        </member>
        <member name="T:Cake.Karma.KarmaRunSettings">
            <summary>
            Settings specific to karma run.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaRunSettings.NoRefresh">
            <summary>
            Do not re-glob all the patterns.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Cake.Karma.KarmaRunSettings.EvaluateCore(Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Applies the settings to the process arguments ready for execution.
            </summary>
            <param name="args">The builder to apply the settings to.</param>
        </member>
        <member name="T:Cake.Karma.KarmaStartSettings">
            <summary>
            Settings specific to karma start.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.AutoWatch">
            <summary>
            Auto watch source files and run on change.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.NoAutoWatch">
            <summary>
            Do not watch source files.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.Detached">
            <summary>
            Detach the server.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.Reporters">
            <summary>
            List of reporters.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.Browsers">
            <summary>
            List of browsers to start.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.CaptureTimeout">
            <summary>
            Kill browser if does not capture in given time (ms).
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.SingleRun">
            <summary>
            Run the test when the browsers captured and exit.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.NoSingleRun">
            <summary>
            Disable single-run.
            </summary>
        </member>
        <member name="P:Cake.Karma.KarmaStartSettings.ReportSlowerThan">
            <summary>
            Report tests that are slower then given time (ms).
            </summary>
        </member>
        <member name="M:Cake.Karma.KarmaStartSettings.EvaluateCore(Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Applies the settings to the process arguments ready for execution.
            </summary>
            <param name="args">The builder to apply the settings to.</param>
        </member>
    </members>
</doc>
